[{"C:\\Users\\bouza\\OneDrive\\Desktop\\projects\\webapp\\src\\index.js":"1","C:\\Users\\bouza\\OneDrive\\Desktop\\projects\\webapp\\src\\App.js":"2","C:\\Users\\bouza\\OneDrive\\Desktop\\projects\\webapp\\src\\serviceWorkerRegistration.js":"3","C:\\Users\\bouza\\OneDrive\\Desktop\\projects\\webapp\\src\\reportWebVitals.js":"4"},{"size":922,"mtime":1607732654777,"results":"5","hashOfConfig":"6"},{"size":964,"mtime":1607762319557,"results":"7","hashOfConfig":"6"},{"size":5116,"mtime":1607719802005,"results":"8","hashOfConfig":"6"},{"size":364,"mtime":1607719756621,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"edhc6f",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"C:\\Users\\bouza\\OneDrive\\Desktop\\projects\\webapp\\src\\index.js",[],["21","22","23","24","25"],"C:\\Users\\bouza\\OneDrive\\Desktop\\projects\\webapp\\src\\App.js",[],"C:\\Users\\bouza\\OneDrive\\Desktop\\projects\\webapp\\src\\serviceWorkerRegistration.js",["26","27","28","29","30","31"],"// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n",["32","33","34","35","36"],"C:\\Users\\bouza\\OneDrive\\Desktop\\projects\\webapp\\src\\reportWebVitals.js",[],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":37,"column":15,"nodeType":"49","messageId":"50","endLine":37,"endColumn":26},{"ruleId":"47","severity":1,"message":"48","line":50,"column":15,"nodeType":"49","messageId":"50","endLine":50,"endColumn":26},{"ruleId":"47","severity":1,"message":"48","line":62,"column":7,"nodeType":"49","messageId":"50","endLine":62,"endColumn":20},{"ruleId":"47","severity":1,"message":"48","line":90,"column":7,"nodeType":"49","messageId":"50","endLine":90,"endColumn":18},{"ruleId":"47","severity":1,"message":"48","line":115,"column":11,"nodeType":"49","messageId":"50","endLine":115,"endColumn":22},{"ruleId":"47","severity":1,"message":"48","line":135,"column":9,"nodeType":"49","messageId":"50","endLine":135,"endColumn":22},{"ruleId":"37","replacedBy":"51"},{"ruleId":"39","replacedBy":"52"},{"ruleId":"41","replacedBy":"53"},{"ruleId":"43","replacedBy":"54"},{"ruleId":"45","replacedBy":"55"},"lines-around-directive",["56"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-console","Unexpected console statement.","MemberExpression","unexpected",["56"],[],[],[],[],"padding-line-between-statements"]